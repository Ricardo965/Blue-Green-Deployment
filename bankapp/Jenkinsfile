pipeline {
    agent any
    tools {
        maven 'maven'
    }
    
    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['blue', 'green'], description: 'Choose which environment to deploy: Blue or Green')
        choice(name: 'DOCKER_TAG', choices: ['blue', 'green'], description: 'Choose the Docker image tag for the deployment')
        booleanParam(name: 'SWITCH_TRAFFIC', defaultValue: false, description: 'Switch traffic between Blue and Green')
    }
    
    environment {
        IMAGE_NAME = "ricardo965/bankapp"
        TAG = "${params.DOCKER_TAG}"  // The image tag now comes from the parameter
        KUBE_NAMESPACE = 'webapps'
        SCANNER_HOME= tool 'sonar-scanner'
        K8S_URL = 'a27b5dc04eecb4bbdb101533e31a9b36-1650191112.us-east-1.elb.amazonaws.com'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Ricardo965/Blue-Green-Deployment.git'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                dir('bankapp') {
                    // Ejecutar mvn clean install para compilar el proyecto
                    sh 'mvn clean install -DskipTests'
                    
                    // Definir las propiedades necesarias para sonar
                    withSonarQubeEnv('sonar') {
                        sh """
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=nodejsmysql \
                            -Dsonar.projectName=nodejsmysql \
                            -Dsonar.java.binaries=target/classes
                        """
                    }
                }
            }
        }
        
        stage('Trivy FS Scan') {
            steps {
                dir('bankapp') {
                    sh "trivy fs --format table -o fs.html ."
                }
            }
        }
        
        stage('Docker build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker build -t ${IMAGE_NAME}:${TAG} bankapp"
                    }
                }
            }
        }
        
        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --format table -o image.html ${IMAGE_NAME}:${TAG}"
            }
        }
        
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker push ${IMAGE_NAME}:${TAG}"
                    }
                }
            }
        }
        
        stage('Deploy MySQL Deployment and Service') {
            steps {
                dir('manifests'){
                    script {
                        withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: K8S_URL) {
                            sh "kubectl apply -f mysql-ds.yml -n ${KUBE_NAMESPACE} --validate=false"  // Ensure you have the MySQL deployment YAML ready
                        }
                    }
                }
            }
        }
        
        stage('Deploy SVC-APP') {
            steps {
                dir('manifests'){
                    script {
                        withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: K8S_URL) {
                            sh """ if ! kubectl get svc bankapp-service -n ${KUBE_NAMESPACE}; then
                                    kubectl apply -f bankapp-service.yml -n ${KUBE_NAMESPACE} --validate=false
                                fi
                            """
                    }
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                dir('manifests'){
                    script {
                        def deploymentFile = ""
                        if (params.DEPLOY_ENV == 'blue') {
                            deploymentFile = 'app-deployment-blue.yml'
                        } else {
                            deploymentFile = 'app-deployment-green.yml'
                        }

                        withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: K8S_URL) {
                            sh "kubectl apply -f ${deploymentFile} -n ${KUBE_NAMESPACE} --validate=false"
                        }
                    }
                }
            }
        }
        
        stage('Switch Traffic Between Blue & Green Environment') {
            when {
                expression { return params.SWITCH_TRAFFIC }
            }
            steps {
                dir('manifests'){
                    script {
                        def newEnv = params.DEPLOY_ENV

                        // Always switch traffic based on DEPLOY_ENV
                        withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: K8S_URL) {
                            sh '''
                                kubectl patch service bankapp-service -p "{\\"spec\\": {\\"selector\\": {\\"app\\": \\"bankapp\\", \\"version\\": \\"''' + newEnv + '''\\"}}}" -n ${KUBE_NAMESPACE}
                            '''
                        }
                        echo "Traffic has been switched to the ${newEnv} environment."
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                dir('manifests'){
                    script {
                        def verifyEnv = params.DEPLOY_ENV
                        withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: K8S_URL) {
                            sh """
                            kubectl get pods -l version=${verifyEnv} -n ${KUBE_NAMESPACE} --validate=false
                            kubectl get svc bankapp-service -n ${KUBE_NAMESPACE} --validate=false
                            """
                        }
                    }
                }
            }
        }
    }
}
